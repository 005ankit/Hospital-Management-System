/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package hospital;
import java.sql.*;
import javax.swing.JOptionPane;
//import java.util.Date;
import java.time.LocalDate;
/**
 *
 * @author anand
 */
public class checkdoctor extends javax.swing.JFrame {

    /** Creates new form checkdoctor */
    public checkdoctor() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dcdate = new com.toedter.calendar.JDateChooser();
        btncheck = new javax.swing.JButton();
        btnback = new javax.swing.JButton();
        btnexit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        ddltiming = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(230, 200, 246));

        jLabel2.setText("Enter Doctor Id: ");

        jLabel3.setText("Select appointment Date: ");

        btncheck.setBackground(new java.awt.Color(106, 193, 53));
        btncheck.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btncheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-checkmark-30.png"))); // NOI18N
        btncheck.setText("Check");
        btncheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncheckActionPerformed(evt);
            }
        });

        btnback.setBackground(new java.awt.Color(0, 102, 102));
        btnback.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnback.setForeground(new java.awt.Color(255, 255, 255));
        btnback.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-home-30.png"))); // NOI18N
        btnback.setText("Home");
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        btnexit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-close-window-30.png"))); // NOI18N
        btnexit.setFocusable(false);
        btnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexitActionPerformed(evt);
            }
        });

        jLabel4.setText("Select timing:");

        ddltiming.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10:00 AM-01:00 PM", "03:00 PM-05:00 PM", "08:00 PM-10:00 PM" }));

        jLabel1.setFont(new java.awt.Font("Agency FB", 1, 48)); // NOI18N
        jLabel1.setText("CHECK DOCTOR");

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/check_appointment.png"))); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(btnexit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(80, 80, 80)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(dcdate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 224, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(txtid, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                            .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 132, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(ddltiming, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(0, 0, Short.MAX_VALUE))))
            .add(jPanel1Layout.createSequentialGroup()
                .add(67, 67, 67)
                .add(btncheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 43, Short.MAX_VALUE)
                .add(btnback, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(31, 31, 31))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 267, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(44, 44, 44))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(100, 100, 100))))
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jSeparator1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(btnexit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(31, 31, 31)
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, Short.MAX_VALUE)
                        .add(18, 18, 18)
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtid, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ddltiming, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(26, 26, 26)
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(dcdate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(32, 32, 32)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btncheck)
                            .add(btnback))
                        .add(67, 67, 67))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(60, 60, 60)
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnexitActionPerformed

    public boolean getdoctorbyid(int id){
        try{
            Class.forName("com.mysql.jdbc.Driver");   
        }
        catch(ClassNotFoundException e){
            System.out.println("Error"+e.getMessage());
        }
        try{
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/Project","root","Admin");
            String q="select * from doctor where id=?";
            PreparedStatement st=con.prepareStatement(q);
            st.setInt(1,id);
            ResultSet rs=st.executeQuery();
            if(rs.next()){
                return true;
            }else{
                return false;
            }
        }catch(Exception e){
            System.out.println("Error"+e.getMessage());
        }
        return false;
    }
    public boolean getpatientbyid(int id){
        try{
            Class.forName("com.mysql.jdbc.Driver");   
        }
        catch(ClassNotFoundException e){
            System.out.println("Error"+e.getMessage());
        }
        try{
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/project","root","Admin");
            String q="select * from patient where id=?";
            PreparedStatement st=con.prepareStatement(q);
            st.setInt(1,id);
            ResultSet rs=st.executeQuery();
            if(rs.next()){
                return true;
            }else{
                return false;
            }
        }catch(Exception e){
            System.out.println("Error"+e.getMessage());
        }
        return false;
    }
    
    public boolean checkdoctorAvailability(int id,java.util.Date date,String timing){
        java.sql.Date currentDate = Date.valueOf(LocalDate.now());
        java.sql.Date sqldate=new java.sql.Date(date.getTime());
        if(sqldate.before(currentDate)){
            return true;
        }
        //java.sql.Date sqldate=new java.sql.Date(date.getTime());
        try{
            Class.forName("com.mysql.jdbc.Driver");   
        }
        catch(ClassNotFoundException e){
            System.out.println("Error"+e.getMessage());
        }
        try{
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/Project","root","Admin");
            String q="select * from appointements where doctorid=? and appointment_Date=? and timing=?";
            PreparedStatement st=con.prepareStatement(q);
            st.setInt(1,id);
            st.setDate(2,sqldate);
            st.setString(3,timing);
            ResultSet rs=st.executeQuery();
            if(rs.next()){
                return true;
            }else{
                return false;
            }
        }catch(Exception e){
            System.out.println("Error"+e.getMessage());
        }
        return false;
    }
    
    private void btncheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncheckActionPerformed
        int id=Integer.parseInt(txtid.getText());
        String timing=ddltiming.getSelectedItem().toString();
        try{
                java.util.Date utilDate = dcdate.getDate();
//                long milliseconds = utilDate.getTime();
//                java.sql.Date Date = new java.sql.Date(utilDate.getTime());
                checkdoctor cd=new checkdoctor();
                if(cd.getdoctorbyid(id)){
                   if(cd.checkdoctorAvailability(id,utilDate,timing)){
                        JOptionPane.showMessageDialog(this,"DOCTOR IS NOT AVAILABLE...");
                   }
                    else{
                        JOptionPane.showMessageDialog(this,"DOCTOR IS AVAILABLE...");
                        }      
                }else{
                    JOptionPane.showMessageDialog(this,"PLEASE ENTER VALID DOCTOR ID !!!");
                        }                     
                    }
                    catch(Exception ex){
                        JOptionPane.showMessageDialog(this,"Please Enter Date !!!");
                        return;
                    }
        
        
    }//GEN-LAST:event_btncheckActionPerformed

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        dispose();
    }//GEN-LAST:event_btnbackActionPerformed

//    public boolean getdoctorbyid(int id){
//        try{
//            Class.forName("com.mysql.jdbc.Driver");   
//        }
//        catch(ClassNotFoundException e){
//            System.out.println("Error"+e.getMessage());
//        }
//        try{
//            Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/Project","root","Admin");
//            String q="select * from doctor where id=?";
//            PreparedStatement st=con.prepareStatement(q);
//            st.setInt(1,id);
//            ResultSet rs=st.executeQuery();
//            if(rs.next()){
//                return true;
//            }else{
//                return false;
//            }
//        }catch(Exception e){
//            System.out.println("Error"+e.getMessage());
//        }
//        return false;
//    }
//    public boolean getpatientbyid(int id){
//        try{
//            Class.forName("com.mysql.jdbc.Driver");   
//        }
//        catch(ClassNotFoundException e){
//            System.out.println("Error"+e.getMessage());
//        }
//        try{
//            Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/project","root","Admin");
//            String q="select * from patient where id=?";
//            PreparedStatement st=con.prepareStatement(q);
//            st.setInt(1,id);
//            ResultSet rs=st.executeQuery();
//            if(rs.next()){
//                return true;
//            }else{
//                return false;
//            }
//        }catch(Exception e){
//            System.out.println("Error"+e.getMessage());
//        }
//        return false;
//    }
//    
//    public boolean checkdoctorAvailability(int id,String date){
//        try{
//            Class.forName("com.mysql.jdbc.Driver");   
//        }
//        catch(ClassNotFoundException e){
//            System.out.println("Error"+e.getMessage());
//        }
//        try{
//            Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/Project","root","Admin");
//            String q="select * from appointements where doctorid=? and appointment_Date=?";
//            PreparedStatement st=con.prepareStatement(q);
//            st.setInt(1,id);
//            st.setString(2,date);
//            
//            ResultSet rs=st.executeQuery();
//            if(rs.next()){
//                return true;
//            }else{
//                return false;
//            }
//        }catch(Exception e){
//            System.out.println("Error"+e.getMessage());
//        }
//        return false;
//    }
    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnback;
    private javax.swing.JButton btncheck;
    private javax.swing.JButton btnexit;
    private com.toedter.calendar.JDateChooser dcdate;
    private javax.swing.JComboBox<String> ddltiming;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtid;
    // End of variables declaration//GEN-END:variables

}
